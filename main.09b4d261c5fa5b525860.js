(()=>{"use strict";function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(t,n){for(var r=0;r<n.length;r++){var o=n[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,(void 0,i=function(t,n){if("object"!==e(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var o=r.call(t,"string");if("object"!==e(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(o.key),"symbol"===e(i)?i:String(i)),o)}var i}var n=function(){function e(t,n,r){var o=r.handleCardClick,i=r.handleCardLike,u=r.handleDeleteCard,a=r.handleCardLikeDelete;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._data=t,this._name=t.name,this._link=t.link,this._likes=t.likes,this._id=t._id,this._ownerId=t.owner._id,this._user=t.user,this._templateSelector=n,this._handleCardClick=o,this._handleCardLike=i,this._handleDeleteCard=u,this._handleCardLikeDelete=a,this._element=this._getTemplate(),this._elementLikeButton=this._element.querySelector(".element__like-button"),this._elementLikeCounter=this._element.querySelector(".element__like-button_counter")}var n,r;return n=e,(r=[{key:"_getTemplate",value:function(){return document.querySelector(this._templateSelector).content.querySelector(".element").cloneNode(!0)}},{key:"handleDeleteCard",value:function(){this._element.remove(),this._element=null}},{key:"likesLength",value:function(e){0===e.length?this._elementLikeCounter.textContent="":this._elementLikeCounter.textContent=e.length}},{key:"_likeActive",value:function(){var e=this;this._likes.forEach((function(t){e._user===t._id&&e._elementLikeButton.classList.add("element__like_active")}))}},{key:"isLiked",value:function(){this._elementLikeButton.classList.add("element__like_active")}},{key:"dislike",value:function(){this._elementLikeButton.classList.remove("element__like_active")}},{key:"_setEventListener",value:function(){var e=this;this._image=this._element.querySelector(".element__item"),this._elementLikeButton.addEventListener("click",(function(){e._elementLikeButton.classList.contains("element__like_active")?e._handleCardLikeDelete():e._handleCardLike()})),this._element.querySelector(".element__trash-button").addEventListener("click",this._handleDeleteCard),this._image.addEventListener("click",this._handleCardClick)}},{key:"generateCard",value:function(){return this._setEventListener(),this._elementLikeCounter(this._likes),this._likeActive(),this._image.src=this._link,this._image.alt=this._name,this._element.querySelector(".element__subject").textContent=this._name,this._ownerId===this._user&&this._element.querySelector(".element__trash-button").classList.add("element__delete_active"),this._element}}])&&t(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),e}();function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,(void 0,i=function(e,t){if("object"!==r(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var o=n.call(e,"string");if("object"!==r(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(o.key),"symbol"===r(i)?i:String(i)),o)}var i}var i=function(){function e(t,n){var r=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._items=r,this._renderer=o,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"addItem",value:function(e){this._container.prepend(e)}},{key:"renderItems",value:function(){var e=this;this._items.reverse().forEach((function(t){e._renderer(t)}))}}])&&o(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function u(e){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},u(e)}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==u(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==u(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===u(o)?o:String(o)),r)}var o}var c=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popup=t,this._handleEscClose=this._handleEscClose.bind(this)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"_handleEscClose",value:function(e){"Escape"!==e.key&&"Esc"!==e.key||this.close()}},{key:"setEventListeners",value:function(){var e=this;this._popup.addEventListener("mousedown",(function(t){(t.target.classList.contains("popup_opened")||t.target.classList.contains("popup__close"))&&e.close()}))}}])&&a(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function l(e){return l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},l(e)}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==l(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==l(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===l(o)?o:String(o)),r)}var o}function f(){return f="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=y(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},f.apply(this,arguments)}function p(e,t){return p=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},p(e,t)}function y(e){return y=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},y(e)}var d=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&p(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=y(r);if(o){var n=y(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===l(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function u(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this,e))._popupForm=n._popup.querySelector(".popup__form"),console.log(n._popupForm),n._inputList=n._popupForm.querySelectorAll(".popup__input"),console.log(n._inputList),n._submitButton=n._popup.querySelector(".popup__button_active_submit"),n._handleFormSubmit=t,n}return t=u,(n=[{key:"renderLoading",value:function(e){this._submitButton.textContent=e?"Сохранение...":"Сохранить"}},{key:"_getInputValues",value:function(){var e={};return this._inputList.forEach((function(t){e[t.name]=t.value})),e}},{key:"setEventListeners",value:function(){var e=this;f(y(u.prototype),"setEventListeners",this).call(this),this._popupForm.addEventListener("submit",(function(t){t.preventDefault(),e._handleFormSubmit(e._getInputValues()),e.close()}))}},{key:"close",value:function(){f(y(u.prototype),"close",this).call(this),this._popupForm.reset()}}])&&s(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(c);function _(e){return _="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_(e)}function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==_(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==_(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===_(o)?o:String(o)),r)}var o}function h(){return h="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=b(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},h.apply(this,arguments)}function v(e,t){return v=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},v(e,t)}function b(e){return b=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},b(e)}var S=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&v(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=b(r);if(o){var n=b(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===_(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,e))._image=t._popup.querySelector(".popup__item"),t._name=t._popup.querySelector(".popup__item-subject"),t}return t=u,(n=[{key:"open",value:function(e){h(b(u.prototype),"open",this).call(this),this._image.src=e.src,this._image.alt=e.alt,this._name.textContent=e.alt}}])&&m(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(c);function g(e){return g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},g(e)}function k(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,E(r.key),r)}}function w(e,t,n){return(t=E(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function E(e){var t=function(e,t){if("object"!==g(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==g(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===g(t)?t:String(t)}var L=function(){function e(t,n){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),w(this,"_hasInvalidInput",(function(){return r._inputList.some((function(e){return!e.validity.valid}))})),w(this,"_showInputError",(function(e,t){var n=r._formElement.querySelector("#".concat(e.id,"-error"));e.classList.add(r._inputErrorClass),n.textContent=t,n.classList.add(r._errorClass)})),w(this,"_hideInputError",(function(e){var t=r._formElement.querySelector("#".concat(e.id,"-error"));e.classList.remove(r._inputErrorClass),t.classList.remove(r._errorClass),t.textContent=""})),w(this,"_toggleBtnState",(function(){r._hasInvalidInput()?r._activateButton():r._deactivateButton()})),w(this,"_checkInputValidity",(function(e){e.validity.valid?r._hideInputError(e):r._showInputError(e,e.validationMessage)})),w(this,"_setEventListeners",(function(){r._toggleBtnState(),r._formElement.addEventListener("reset",(function(){setTimeout((function(){r._toggleBtnState()}),0)})),r._inputList.forEach((function(e){e.addEventListener("input",(function(){r._checkInputValidity(e),r._toggleBtnState()}))}))})),w(this,"enableValidation",(function(){r._setEventListeners()})),this._formSelector=t.formSelector,this._inputSelector=t.inputSelector,this._errorSelector=t.errorSelector,this._submitBtnSelector=t.submitBtnSelector,this._inactiveBtnClass=t.inactiveBtnClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._formElement=n,this._inputList=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._btnElement=this._formElement.querySelector(this._submitBtnSelector)}var t,n;return t=e,(n=[{key:"_activateButton",value:function(){this._btnElement.classList.add(this._inactiveBtnClass),this._btnElement.disabled=!0}},{key:"_deactivateButton",value:function(){this._btnElement.classList.remove(this._inactiveBtnClass),this._btnElement.disabled=!1}},{key:"resetValidation",value:function(){var e=this;this._inputList.forEach((function(t){e._hideInputError(t)}))}}])&&k(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function j(e){return j="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},j(e)}function C(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==j(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==j(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===j(o)?o:String(o)),r)}var o}function O(){return O="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=q(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},O.apply(this,arguments)}function P(e,t){return P=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},P(e,t)}function q(e){return q=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},q(e)}var I=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&P(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=q(r);if(o){var n=q(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===j(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function u(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this,e))._popupForm=n._popup.querySelector(".popup__form"),n._handleFormSubmit=t,n}return t=u,(n=[{key:"setEventListeners",value:function(){var e=this;O(q(u.prototype),"setEventListeners",this).call(this),this._popupForm.addEventListener("submit",(function(t){e._handleFormSubmit(t)}))}},{key:"setCard",value:function(){this._card=card}},{key:"getCard",value:function(){return this._card}}])&&C(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(c);function T(e){return T="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},T(e)}function R(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==T(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==T(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===T(o)?o:String(o)),r)}var o}var B=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._profileName=t.name,this._profileDefinition=t.about,this._userAvatar=t.avatar}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return this._userInfo={name:this._profileName,about:this._profileDefinition,avatar:this._userAvatar},this._userInfo}},{key:"setUserInfo",value:function(e){this._profileName.textContent=e.name,this._profileDefinition.textContent=e.about}},{key:"setUserAvatar",value:function(e){this._userAvatar.src=e}},{key:"setId",value:function(e){this._id=e}},{key:"getId",value:function(){return this._id}}])&&R(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function U(e){return U="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},U(e)}function A(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==U(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==U(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===U(o)?o:String(o)),r)}var o}var D,x=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=t.baseUrl,this._headers=t.headers}var t,n;return t=e,(n=[{key:"_sentResponse",value:function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}},{key:"getUserInfo",value:function(){return fetch("".concat(this._baseUrl,"/users/me"),{method:"GET",headers:this._headers}).then(this._sentResponse)}},{key:"updateUserInfo",value:function(e){return fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.about})}).then(this._sentResponse)}},{key:"getCards",value:function(){return fetch("".concat(this._baseUrl,"/cards"),{method:"GET",headers:this._headers}).then(this._sentResponse)}},{key:"addNewCard",value:function(e){return fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})}).then(this._sentResponse)}},{key:"likeCard",value:function(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"PUT",headers:this._headers}).then(this._sentResponse)}},{key:"dislikeCard",value:function(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"DELETE",headers:this._headers}).then(this._sentResponse)}},{key:"deleteCard",value:function(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:this._headers}).then(this._sentResponse)}},{key:"updateAvatar",value:function(e){return fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.avatar})}).then(this._sentResponse)}}])&&A(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),V={formSelector:".popup__form",inputSelector:".popup__input",errorSelector:".popup__input-error",submitBtnSelector:".popup__button_active_submit",inactiveBtnClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__input-error_active"},F=(document.querySelector(".profile__avatar-image"),document.querySelector(".profile__avatar")),N=document.querySelector(".popup_avatar-change"),J=N.querySelector(".popup__form_avatar"),G=document.querySelector(".popup_delete").querySelector(".popup__form_delete-card"),H=document.querySelector(".popup__form_profile"),M=document.querySelector(".profile__button_active_edit"),z=document.querySelector(".profile__button_active_add"),$=document.querySelector(".popup__form_element"),K=(document.querySelector(".elements"),document.querySelector("#card-template").content.querySelector(".element"),document.querySelector(".popup_profile")),Q=document.querySelector(".popup_element"),W=document.querySelector(".popup_img"),X=(K.querySelector(".popup__title"),Q.querySelector(".popup__title"),document.querySelector(".popup__item"),document.querySelector(".popup__item-subject"),document.querySelector(".popup__item-subject"),document.querySelector(".popup__item"),document.querySelector(".profile__name")),Y=document.querySelector(".profile__definition"),Z=H.querySelector(".popup__input_profile_name"),ee=H.querySelector(".popup__input_profile_title"),te=(document.querySelector(".popup__button_active_save_card"),Q.querySelector(".popup__form_element"),document.querySelector(".popup__input_element_name"),document.querySelector(".popup__input_element_url"),document.querySelector(".popup__button"),document.querySelectorAll(".popup"),document.querySelector(".popup__close")),ne=document.querySelector(".popup__button_active_exit");function re(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var oe=new x({baseUrl:"https://mesto.nomoreparties.co/v1/cohort-60",headers:{authorization:"3aa61c49-fdf8-469f-ac89-ecfdfa4ec988","Content-Type":"application/json"}}),ie=new L(V,$);ie.enableValidation();var ue=new L(V,H);ue.enableValidation();var ae=new L(V,N);ae.enableValidation();var ce=new i((function(e){var t=me(e).generateCard();ce.addItem(t)}),".elements"),le=new B({profileName:".profile__name",profileDefinition:".profile__definition",userAvatar:".profile__avatar-image"}),se=new S(W);se.setEventListeners();var fe=new d(K,(function(e){fe.renderLoading(!0,"Сохранение..."),oe.updateUserInfo(e).then((function(e){le.setUserInfo(e),fe.close()})).catch((function(e){fe.renderLoading(!0,"Ошибка отправки формы"),console.log("Ошибка: ".concat(e))})).finally((function(){fe.renderLoading(!1)}))}));fe.setEventListeners(),te.addEventListener("click",(function(){fe.close()}));var pe=new d(Q,(function(e){pe.renderLoading(!0,"Сохранение..."),oe.addNewCard(e).then((function(e){ce.addItem(me(e).generateCard()),pe.close()})).catch((function(e){pe.renderLoading(!0,"Ошибка отправки формы"),console.log("Ошибка: ".concat(e))})).finally((function(){pe.renderLoading(!1)}))}));pe.setEventListeners(),ne.addEventListener("click",(function(){pe.close()})),M.addEventListener("click",(function(){fe.open(),Z.value=X.textContent,ee.value=Y.textContent,ue.resetValidation()}));var ye=new I(G,(function(e){ye.renderLoading(!0,"Удаление..."),oe.deleteCard(e._data._id).then((function(){e.deleteCard(),ye.close()})).catch((function(e){console.log("Ошибка: ".concat(e))})).finally((function(){ye.renderLoading(!1)}))}));ye.setEventListeners();var de=new d(J,(function(e){de.renderLoading(!0,"Сохранение..."),oe.updateAvatar(e.link).then((function(e){le.setUserInfo(e),de.close()})).catch((function(e){console.log("Ошибка.....: ".concat(e))})).finally((function(){de.renderLoading(!1)}))}));function _e(e){se.open(e.target)}function me(e){var t=new n(e,"#card",_e,D,(function(){return e=t,void ye.open(e);var e}),(function(){oe.likeCard(e._id).then((function(e){t.likesLength(e.data),t.isLiked()})).catch((function(e){return console.log("Ошибка: ".concat(e))}))}),(function(){oe.dislikeCard(e._id).then((function(e){t.likesLength(e.data),t.dislike()})).catch((function(e){return console.log("Ошибка: ".concat(e))}))}));return t}de.setEventListeners(),Promise.all([oe.updateUserInfo(),oe.getCards()]).then((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,u,a=[],c=!0,l=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=i.call(n)).done)&&(a.push(r.value),a.length!==t);c=!0);}catch(e){l=!0,o=e}finally{try{if(!c&&null!=n.return&&(u=n.return(),Object(u)!==u))return}finally{if(l)throw o}}return a}}(t,n)||function(e,t){if(e){if("string"==typeof e)return re(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?re(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1];o._id,le.setUserInfo(o),ce.renderItems(i)})).catch((function(e){console.log(e)})),M.addEventListener("click",(function(){fe.open();var e=le.getUserInfo(),t=e.name,n=e.about;Z.value=t,ee.value=n,ue.resetValidation()})),z.addEventListener("click",(function(){pe.open(),ie.resetValidation()})),F.addEventListener("click",(function(){de.open(),ae.resetValidation()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,